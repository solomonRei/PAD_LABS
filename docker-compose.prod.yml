version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: usersvc-postgres
    environment:
      POSTGRES_DB: ${USER_SVC_DB_NAME}
      POSTGRES_USER: ${USER_SVC_DB_USER}
      POSTGRES_PASSWORD: ${USER_SVC_DB_PASSWORD}
    volumes:
      - ./postgres-auth:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - pad-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-pad_user} -d ${DB_NAME:-pad_users}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    image: laineer/pad-user-svc:latest
    container_name: pad-user-service
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SERVER_PORT: ${USER_SVC_SERVER_PORT:-8080}
      SPRING_DATASOURCE_URL: jdbc:postgresql://usersvc-postgres:5432/${USER_SVC_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${USER_SVC_SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${USER_SVC_SPRING_DATASOURCE_PASSWORD}
      DISCORD_CLIENT_ID: ${USER_SVC_DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${USER_SVC_DISCORD_CLIENT_SECRET}
      DISCORD_BOT_TOKEN: ${USER_SVC_DISCORD_BOT_TOKEN}
      FAF_GUILD_ID: ${USER_SVC_FAF_GUILD_ID}
      JWT_SECRET: ${USER_SVC_JWT_SECRET}
      JWT_TTL_MINUTES: ${USER_SVC_JWT_TTL_MINUTES}
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${USER_SVC_SPRING_JPA_HIBERNATE_DDL_AUTO}
    ports:
      - "${USER_SVC_EXTERNAL_PORT:-8080}:${SERVER_PORT:-8080}"
    networks:
      - pad-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${USER_SVC_SERVER_PORT}/userservice/api/v1/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  notification-service:
    image: laineer/pad-notification-svc:latest
    container_name: pad-notification-service
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SERVER_PORT: ${NOTIFICATION_SVC_SERVER_PORT}
      NOTIFICATION_SVC_MAIL_ENABLED: ${NOTIFICATION_SVC_MAIL_ENABLED:-false}
      NOTIFICATION_SVC_MAIL_FROM: ${NOTIFICATION_SVC_MAIL_FROM:-no-reply@example.com}
      NOTIFICATION_SVC_MAIL_USERNAME: ${NOTIFICATION_SVC_MAIL_USERNAME:-test}
      NOTIFICATION_SVC_MAIL_PASSWORD: ${NOTIFICATION_SVC_MAIL_PASSWORD:-test}
      NOTIFICATION_SVC_MONGO_URI: ${NOTIFICATION_SVC_MONGO_URI}
      NOTIFICATION_SVC_MONGO_DATABASE: ${NOTIFICATION_SVC_MONGO_DATABASE}
    ports:
      - "${NOTIFICATION_SVC_SERVER_PORT:-8080}:${NOTIFICATION_SVC_SERVER_PORT:-8080}"
    networks:
      - pad-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8080/notificationsvc/api/v1/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  budgeting-service:
    image: mithancik/pad-budgeting-service:latest
    container_name: budgeting-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: ${BUDGETING_SVC_SERVER_PORT}
      DATABASE_URL: ${BUDGETING_SVC_DATABASE_URL}
    volumes:
      - ./prisma/budgeting:/app/prisma/budgeting
    ports:
      - "${BUDGETING_SVC_SERVER_PORT}:3000"
    networks:
      - pad-network

  budgeting-sqlite:
    image: keinos/sqlite3
    container_name: budgeting-sqlite
    stdin_open: true
    tty: true
    volumes:
      - ./prisma/budgeting:/app/prisma/budgeting
    working_dir: /app/prisma/budgeting
    command: ["sqlite3", "dev.db"]
    networks:
      - pad-network

  lost-and-found-service:
    image: mithancik/pad-budgeting-service:latest
    container_name: lost-and-found-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: ${LOST_AND_FOUND_SVC_SERVER_PORT}
      DATABASE_URL: ${LOST_AND_FOUND_SVC_DATABASE_URL}
    volumes:
      - ./prisma/lost-and-found:/app/prisma/lost-and-found
    ports:
      - "${LOST_AND_FOUND_SVC_SERVER_PORT}:3000"
    networks:
      - pad-network

  lost-and-found-service-sqlite:
    image: keinos/sqlite3
    container_name: lost-and-found-sqlite
    stdin_open: true
    tty: true
    volumes:
      - ./prisma/lost-and-found:/app/prisma/lost-and-found
    working_dir: /app/prisma/lost-and-found
    command: ["sqlite3", "dev.db"]
    networks:
      - pad-network

volumes:
  postgres_data:
    driver: local

networks:
  pad-network:
    driver: bridge
